// GeneticAlg.h

/*
Header file for genetic algortihm
*/

#ifndef _GENETICALG_H
#define _GENETICALG_H

#include "BitVector.h"
#include <vector>

namespace QMC{
	class GeneticAlg
	{
	public:
		GeneticAlg(unsigned size, unsigned precision, unsigned iterations, ::std::vector<double> domain);
		// GeneticAlg(unsigned size, unsigned precision, unsigned iterations, unsigned NParams, ::std::vector<double> domain);
		~GeneticAlg();
		
		int calcLength();

		// Determines the chromosome length required to obtain the desired precision in each dimension
		int cLength(double rangeStart, double rangeEnd);
		void setup();
		double xValue(int* chromosome, int xLength);
		double yValue(int* chromosome, int yLength);
		double fitnessValue(int* chromosome, int xLength, int yLength);
		
		// New farm is set up by using a roulette wheel parent selection
		void roulette(int xLength, int yLength);
		void crossing();
		void mutate();
		void run();

		int getLength() const;


	private:
		unsigned m_Size;
		unsigned m_Precision;
		unsigned m_Iterations;
		::std::vector<double> m_Domain;
		int m_Length;
		int** m_Farm;	
	};
};

#endif
