// GeneticAlg.cpp

#include "GeneticAlg.h"
#include <cmath>
#include <ctime>
#include <cstdlib>

using namespace QMC;

GeneticAlg::GeneticAlg(unsigned size, unsigned precision, unsigned iterations, ::std::vector<double> domain):
	m_Size(size), m_Precision(precision), m_Iterations(iterations), m_Domain(domain)
{
	m_Length = calcLength();
	m_Farm = new int*[m_Size];
	for(int i=0; i<m_Size; i++)
	{
		m_Farm[i] = new int[m_Length];
	}
}


GeneticAlg::~GeneticAlg()
{
	for(int k=0; k<m_Size; k++)
	{
		delete[] m_Farm[k];
	}
	
	delete m_Farm;
	m_Farm = 0;
}


int GeneticAlg::calcLength()
{
	int xLength = cLength(m_Precision, m_Domain[0], m_Domain[1]);
	int yLength = cLength(m_Precision, m_Domain[2], m_Domain[3]);
	
	return (xLength + yLength);
}


int GeneticAlg::cLength(double rangeStart, double rangeEnd)
{
	int length = 0;
	double total = (rangeEnd - rangeStart)*pow(10.0, m_Precision);

	while(total > pow(2.0, length))
	{
		length++;
	}

	return length;
}


void GeneticAlg::setup()
{
	srand((unsigned long) time(NULL));

	for(int i=0; i<m_Size; i++)
	{
		for(int j=0; j<m_Length; j++)
		{
			m_Farm[i][j] = rand()%2;
		}
	}
}


double xValue(int* chromosome, int xLength)
{
	double m = 0.0;
	
	for(int i=0; i<xLength, i++)
	{
		m += chromosome[xLength-i-1]*pow(2.0, i);
	}

	double x = m_Domain[0] + m*(m_Domain[1] - m_Domain[0])/pow(2.0, xLength)-1.0);

	return x;
}


double yValue(int* chromosome, int yLength)
{
	double m = 0.0;

	for(int i=0; i<xLength, i++)
	{
		m += chromosome[m_Length-i-1]*pow(2.0, i);
	}

	double y = m_Domain[2] + m*(m_Domain[3] - m_Domain[2])/pow(2.0, yLength)-1.0);

	return y;
}


double fitnessValue(double (*function)(double, double), int* chromosome, int xLength, int yLength)
{
	return 1.0;
}


void roulette(int xLength, int yLength)
{

}


void crossing()
{

}
		

void mutate()
{

}


void run()
{

}
