// VMCconfig.h

#ifndef _VMCCONFIG_H
#define _VMCCONFIG_H


#include <vector>
#include <valarray>
//#include <cmath>
//#include <exception>

#include "@BUILD_DIR@/Utilities/VMCPoint.h"


namespace QMC{
	
	//VMCPoint used to assign position for each particle
	//typedef std::valarray<double> VMCPoint; 
	
	//VMCconfig used to create basic phase space for monte carlo calculations.
	class VMCconfig
	{
	public:
		VMCconfig(unsigned NParticles, unsigned ndim, const std::valarray<double>& BoxSize, double ParticleRadius);

		virtual int TrialMove(unsigned* pnk, VMCPoint& endPoint, double* pdq) = 0;
		virtual int Move(unsigned k, const VMCPoint& newPoint, bool bComputeE) = 0;

		double GetEnergy();
		double GetEnergySqd();
		unsigned GetDimension() const;
		unsigned GetNParticles() const;
		virtual void Initialize();

		virtual void ComputeEnergy() = 0;
		virtual void ComputeEnergySqd() = 0;
		//double VmcDistance(VMCPoint& Pointa, VMCPoint& Pointb);

                static const int m_Seed = -123456789;

		virtual ~VMCconfig();

	protected:
		double m_Density;
		unsigned m_NParticles;
		unsigned m_NDim;
		std::valarray<double> m_BoxSize;
		double m_radius0;
		std::vector<VMCPoint> m_vPoints;
		double m_Energy;
		double m_EnergySqd;
		bool m_EnergyComputed;
				
	private:
		//VMCconfig(const VMCconfig& rhsConfig);
		//VMCconfig& operator=(const VMCconfig& rhsConfig);
	};

}; //end namespace

#endif
