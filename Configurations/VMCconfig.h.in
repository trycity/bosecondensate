// VMCconfig.h

#ifndef _VMCCONFIG_H
#define _VMCCONFIG_H


#include <vector>
#include <valarray>
//#include <cmath>
//#include <exception>

#include "@BUILD_DIR@/Utilities/VMCPoint.h"
#include "@BUILD_DIR@/Utilities/rand.h"


namespace QMC{
	
	//VMCPoint used to assign position for each particle
	//typedef std::valarray<double> VMCPoint; 
	
	//VMCconfig used to create basic phase space for monte carlo calculations.
	class VMCconfig
	{
	public:
		VMCconfig(unsigned NParticles, unsigned ndim, const std::valarray<double>& BoxSize, double ParticleRadius);

		virtual int TrialMove(unsigned* pnk, VMCPoint& endPoint, double* pdq) = 0;
		virtual int Move(unsigned k, const VMCPoint& newPoint, bool bComputeE) = 0;

		double GetEnergy();
		double GetEnergySqd();
		unsigned GetDimension() const;
		unsigned GetNParticles() const;
		virtual void Initialize();

		
		//double VmcDistance(VMCPoint& Pointa, VMCPoint& Pointb);

                int m_Seed;

		virtual ~VMCconfig();

	protected:
		double m_Density;
		unsigned m_NParticles;
		unsigned m_NDim;
		std::valarray<double> m_BoxSize;
		double m_radius0;
		std::vector<VMCPoint> m_vPoints;
		double m_Energy;
		double m_EnergySqd;
		bool m_EnergyComputed;

		virtual double ComputeEnergy() = 0;
		virtual double ComputeEnergySqd() = 0;
				
	private:
		//VMCconfig(const VMCconfig& rhsConfig);
		//VMCconfig& operator=(const VMCconfig& rhsConfig);
	};

	/*template <typename Phi, typename InteractionF, typename localE, typename localESqd>
	class JastrowConfig : public VMCconfig
	{
	public:
		JastrowConfig(unsigned NParticles, unsigned ndim, const std::valarray<double>& BoxSize,               				double ParticleRadius, const Phi& wfnPhi, const InteractionF& wfnF, const localE& LE, 				const localESqd& LESqd): VMCconfig(NParticles, ndim, BoxSize, ParticleRadius), m_wfnPhi(wfnPhi), 					m_wfnF(wfnF), m_localEn(LE), m_localEnSqd(LESqd) {}
                   			
		//~JastrowConfig(){}
					
		int TrialMove(unsigned* pnWalked, VMCPoint& endPoint, double* pdq)
		{
			// pick one particle at random
			unsigned k = (unsigned)(ran2(m_Seed)*m_NParticles);
			
			// this is the one to be moved
			*pnWalked = k;
			
			// compute its distance to other particles
			std::valarray<double> rki(m_NParticles-1);
			for(unsigned i=0; i<k; i++){
				rki[i] = VmcDistance(m_vPoints[k], m_vPoints[i]);
			}
			for(unsigned j=k+1; j<m_NParticles; j++){
				rki[j-1] = VmcDistance(m_vPoints[k], m_vPoints[j]);
			}
			
			// make a trial move and re-compute distances to other particles
			endPoint.resize(m_NDim);
			std::valarray<double> rkiT(m_NParticles-1);
			bool Accept = true;
			do{
				for(unsigned n=0; n<m_NDim; n++){
					endPoint[n] = (ran2(m_Seed)-0.5)*m_BoxSize[n];
				}
				
				for(unsigned m=0; m<k; m++){
					rkiT[m] = VmcDistance(endPoint, m_vPoints[m]);
					if(rkiT[m] < m_radius0){
						Accept = false;
						break;
					}
				}
				if(Accept){
					for(unsigned i=k+1; i<m_NParticles; i++){
						rkiT[i-1] = VmcDistance(endPoint, m_vPoints[i]);
						if(rkiT[i-1] < m_radius0){
							Accept = false;
							break;
						}
					}
				}		
			}while(!Accept);
			
			double w=1.0;
			w *= m_wfnPhi(endPoint)/m_wfnPhi(m_vPoints[k]);
			for(unsigned n=0; n<m_NParticles; n++){
				w *= m_wfnF(rkiT[n])/m_wfnF(rki[n]);
			}
			
			*pdq = w*w;
			
			return 0;
		}
		
		int Move(unsigned k, const VMCPoint& newPoint, bool bComputeE){
			//if(k>m_vPoints.size()){
				//THROW_EXCEPTION("EXCEPTION: particle chosen is greater than total number of particles");
			//}
			
			m_vPoints[k] = newPoint;
			
			if(bComputeE && k<m_MaxCorrelation){
				ComputeEnergy();
				ComputeEnergySqd();
			}
			
			return 0;
		}
	protected:

		double ComputeEnergy(){
			m_Energy = m_localEn(m_vPoints);
			m_EnergyComputed = true;
			
			return m_Energy;
		}
		
		double ComputeEnergySqd(){
			m_EnergySqd = m_localEnSqd(m_vPoints);

			return m_EnergySqd;
		}	
					
		Phi m_wfnPhi;
		InteractionF m_wfnF;
		localE m_localEn;
		localESqd m_localEnSqd;
		static const unsigned m_MaxCorrelation = 3;		
	};*/

}; //end namespace

#endif
