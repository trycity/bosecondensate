// TConfigParser.cpp

#include "TConfigParser.h"
#include "TParser.h"
#include "Utilities/StringUtilities.h"

#include <iostream>
#include <string>
#include <vector>

using namespace QMC;

TConfigParser::TConfigParser( const ::std::string& filename ) :
    m_filename( filename ),
    m_fileParser( new TSimpleIniFile( m_filename ) ),
    m_xmlParser( new TParser() )
{
    m_rootXMLDir = m_fileParser->getVal< ::std::string >( "RUNSETUP", "RootDir", "." ) ;
    m_rootXMLDir += "/";
}

TConfigParser::~TConfigParser() {
    if( m_fileParser != 0 ) {
        delete m_fileParser;
    }

    if( m_xmlParser != 0 ) {
        delete m_xmlParser;
    }
}

bool 
TConfigParser::useFlag( const ::std::string& section,
                        const ::std::string& key ) const {
    ::std::string keyValue = m_fileParser->getVal< ::std::string >( section, key, "default" );
    if( ciEqual( keyValue, "default" ) ) {
        return false;
    } else if( ciEqual( keyValue, "yes" )  ||
               ciEqual( keyValue, "y" )    ||
               ciEqual( keyValue, "true" ) ||
               ciEqual( keyValue, "t" ) 
               ) {
        return true;
    }

    return false;
}

::std::vector< ::std::string >
TConfigParser::getSectionKeys( const ::std::string& section ) const {
    return m_fileParser->getSectionKeys( section );
}

::std::vector< ::std::string >
TConfigParser::getKeyValues( const ::std::string& section,
                             const ::std::string& key ) const {
    return  m_fileParser->getVector< ::std::string >( section, key, ::std::string( "," ) );
}

