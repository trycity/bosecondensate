// JastrowConfig_Test.cpp

#include <iostream>
#include <valarray>
#include <cmath>

#include "Configurations/JastrowConfig.h"
#include "Wavefunctions/SymHoPhi.h"
#include "Wavefunctions/NonInteractingF.h"
#include "Energy_Terms/SymHoLocalE.h"
#include "Energy_Terms/SymHoLocalESqd.h"
#include "Metropolis_Walker/VMCMetropolisWalker.h"

using namespace QMC;
using namespace std;


int main()
{
	static unsigned nConfigInit = 1000;
	static unsigned nConfigs = 100000;
	static unsigned nRuns = 300;

	double alpha = 0.5;
        unsigned NAtoms = 10;
        unsigned NDIM = 3;
        ::std::valarray<double> BOXSIZES(NDIM);
        BOXSIZES[0] = 5.1;
        BOXSIZES[1] = 5.1;
        BOXSIZES[2] = 5.1;
        double r0 = 0.0;
	
	SymHoPhi phi(alpha);
	NonInteractingF F;

        SymHoLocalE localE(alpha);
        SymHoLocalESqd localESqd(alpha);

        ::std::cout<<"Wavefunctions and energy terms created..."<<::std::endl;

	JastrowConfig< SymHoPhi, NonInteractingF, SymHoLocalE, SymHoLocalESqd>
            configi(NAtoms, NDIM, BOXSIZES, r0, phi, F, localE, localESqd);
        ::std::cout<<"JastrowConfig created.."<<::std::endl;

	VMCMetropolisWalker< JastrowConfig<SymHoPhi, NonInteractingF, SymHoLocalE, SymHoLocalESqd> > walker(configi);
	::std::cout<<"Walker created.."<<::std::endl;

	// Initial run
	walker.Run(nConfigInit,nConfigs);
	double Eave = walker.GetEAve();
	double Edev = walker.GetEDev();
	double EaveSum = Eave;
	double Eave2Sum = Eave*Eave;
	double EdevSum = Edev;
	double Edev2Sum = Edev*Edev;
	for(unsigned i=1;i<nRuns;i++) {
		walker.Run(0,nConfigs);
		Eave = walker.GetEAve();
		Edev = walker.GetEDev();
//		cout << "For Run #" << i << endl;
//		cout << "Eave = " << Eave << endl;
//		cout << "Edev = " << Edev << endl;
		EaveSum += Eave;
		Eave2Sum += Eave*Eave;
		EdevSum += Edev;
		Edev2Sum += Edev*Edev;
		::std::cout<<"nRuns = "<<i<<::std::endl;
	}
	double AveEave = EaveSum/nRuns;
	double VarEave = sqrt(Eave2Sum/nRuns-AveEave*AveEave);
	double AveEdev = EdevSum/nRuns;
	double VarEdev = sqrt(Edev2Sum/nRuns-AveEdev*AveEdev);

	::std::cout<<"AveEave = "<<AveEave<<::std::endl;
	::std::cout<<"Variance = "<<VarEave<<::std::endl;

	return 0;
}
