// VMCMetropolisWalker.h

/*
Class describes behaviour of a variational Monte Carlo (VMC) Metropolis walker, as defined by Metropolis algorithm
*/

#ifndef _VMCMETROPOLISWALKER_H
#define _VMCMETROPOLISWALKER_H

#include <cmath>
#include <valarray>

#include "Utilities/rand.h"
#include "Utilities/VMCPoint.h"
#include "Configurations/JastrowConfig.h"

namespace QMC
{
class VMCMetropolisWalker
{
public:
  VMCMetropolisWalker(const JastrowConfig& configi);
  ~VMCMetropolisWalker();
		
  void Run(unsigned nConfigInit, unsigned nConfigRun);
  double getEAve() const;
  double getEDev() const;
  double getEAveSqd() const;
  unsigned getNConfig() const;
		
private:
   JastrowConfig m_Config;
   unsigned m_nConfig;
   double m_EAve;
   double m_EAveSqd;
   double m_EDev;
};


inline double VMCMetropolisWalker::getEAve() const
{
   return m_EAve; 
}

inline double VMCMetropolisWalker::getEDev() const
{
   return m_EDev; 
}

inline double VMCMetropolisWalker::getEAveSqd() const
{
   return m_EAveSqd;
}

inline unsigned VMCMetropolisWalker::getNConfig() const
{ 
   return m_nConfig; 
}

};	
#endif
