// TIntF.cpp

#include "TIntF.h"
#include "EffectiveRangeF.h"
#include "HardSphereF.h"
#include "NonInteractingF.h"
#include "@BUILD_DIR@/Utilities/StringUtilities.h"

using namespace QMC;

namespace{
	// Find a better way to do this
	EffectiveRangeF effectF;
	HardSphereF HSF;
	NonInteractingF nonIntF;
};

TIntF::TIntF(::std::string TypeOfF):m_TypeOfF(TypeOfF)
{

}

TIntF::~TIntF()
{
}

void TIntF::setVariationParams(const ArgType& args)
{
	if(m_TypeOfF == "EffectiveRangeF")
	{
		double as = convertFromString<double>(args[0]);
		effectF.setScatteringLength(as);
	}else if(m_TypeOfF == "HardSphereF")
	{
		double as = convertFromString<double>(args[0]);
		double hDistance = convertFromString<double>(args[1]);
		double kconst = convertFromString<double>(args[2]);

		HSF.setScatteringLength(as);
		HSF.setHealingDistance(hDistance);
		HSF.setKconstant(kconst);		
	}
}

double TIntF::getVariationParams()
{
	double r = 0.0;
	
	return r;
}

::std::string TIntF::getTypeF()
{
	return m_TypeOfF;
}

double TIntF::operator()(double rij)const
{
	double P=1.0;	
	if(m_TypeOfF == "EffectiveRangeF")
	{
		P = effectF(rij);
	}else if(m_TypeOfF == "HardSphereF")
	{
		P = HSF(rij);		
	}

	return P;
}





